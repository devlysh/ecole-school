datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  passwordHash String?    @map("password_hash")
  name         String?    @map("name")
  dateJoined   DateTime   @default(now()) @map("date_joined")
  isActive     Boolean    @default(true) @map("is_active")
  roles        UserRole[]
  student      Student?
  teacher      Teacher?
  settings     Json?

  @@index([email], name: "idx_user_email")
  @@index([isActive], name: "idx_user_is_active")
  @@map("users")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  users UserRole[]

  @@map("roles")
}

model UserRole {
  userId Int @map("user_id")
  roleId Int @map("role_id")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@index([userId], name: "idx_user_roles_user_id")
  @@index([roleId], name: "idx_user_roles_role_id")
  @@map("user_roles")
}

model Currency {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String @unique

  @@map("currencies")
}

model Language {
  id   Int     @id @default(autoincrement())
  name String  @unique
  code String? @unique

  teacherLanguages TeacherLanguage[]

  @@map("languages")
}

model Teacher {
  userId Int @id @map("user_id")

  user           User              @relation(fields: [userId], references: [id])
  students       Student[]
  languages      TeacherLanguage[]
  availableSlots AvailableSlot[]
  bookedClasses  BookedClass[]

  @@map("teachers")
}

model TeacherLanguage {
  teacherId  Int @map("teacher_id")
  languageId Int @map("language_id")

  teacher  Teacher  @relation(fields: [teacherId], references: [userId])
  language Language @relation(fields: [languageId], references: [id])

  @@id([teacherId, languageId])
  @@map("teacher_languages")
}

model AvailableSlot {
  id        Int      @id @default(autoincrement())
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  rrule     String?
  teacher   Teacher  @relation(fields: [teacherId], references: [userId])
  teacherId Int      @map("teacher_id")

  @@map("available_slots")
}

model BookedClass {
  id        Int      @id @default(autoincrement())
  date      DateTime
  student   Student  @relation(fields: [studentId], references: [userId])
  studentId Int      @map("student_id")
  teacher   Teacher  @relation(fields: [teacherId], references: [userId])
  teacherId Int      @map("teacher_id")
  recurring Boolean

  @@index([date, teacherId, studentId], name: "idx_booked_class_date_teacher_id_student_id")
  @@map("booked_classes")
}

model Student {
  userId               Int     @id @map("user_id")
  assignedTeacherId    Int?    @map("assigned_teacher_id")
  stripeCustomerId     String  @unique @map("stripe_customer_id")
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")

  user          User          @relation(fields: [userId], references: [id])
  teacher       Teacher?      @relation(fields: [assignedTeacherId], references: [userId])
  bookedClasses BookedClass[]

  @@index([assignedTeacherId], name: "idx_student_assigned_teacher_id")
  @@map("students")
}

model SystemSetting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String

  @@map("system_settings")
}
